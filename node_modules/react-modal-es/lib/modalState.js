"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = function () {
  var modalNameActiveObj = {};
  var listeners = [];

  var isModalActive = function isModalActive(modalName) {
    if (modalNameActiveObj[modalName] === undefined) return false;
    return modalNameActiveObj[modalName];
  };

  var callListeners = function callListeners(modalNameActiveObj) {
    listeners.forEach(function (listener) {
      listener(modalNameActiveObj);
    });
  };

  var toggleModal = function toggleModal(status) {
    return function (modalName) {
      modalNameActiveObj = _extends({}, modalNameActiveObj, _defineProperty({}, modalName, status));
      callListeners(modalNameActiveObj);
    };
  };

  var openModal = toggleModal(true);
  var closeModal = toggleModal(false);
  var closeAllModal = function closeAllModal() {
    for (var key in modalNameActiveObj) {
      modalNameActiveObj = _extends({}, modalNameActiveObj, _defineProperty({}, key, false));
    }
  };

  var subscriber = function subscriber(listener) {
    listeners = [].concat(_toConsumableArray(listeners), [listener]);

    return function () {
      var index = listeners.indexOf(listener);
      listeners.splice(index, 1);
    };
  };

  return {
    isModalActive: isModalActive,
    openModal: openModal,
    closeModal: closeModal,
    closeAllModal: closeAllModal,
    subscriber: subscriber
  };
};