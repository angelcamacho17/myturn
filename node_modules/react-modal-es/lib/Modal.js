'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Animation = require('./Animation');

var _Animation2 = _interopRequireDefault(_Animation);

var _defaultStyles = require('./defaultStyles');

var _defaultStyles2 = _interopRequireDefault(_defaultStyles);

var _helper = require('./helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Modal = (_temp = _class = function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.isActive = function () {
      var modalNameActive = _this.state.modalNameActive;
      var name = _this.props.name;

      return modalNameActive === name;
    };

    _this.subscriber = function () {
      var _this$props = _this.props,
          didOpen = _this$props.didOpen,
          willClose = _this$props.willClose,
          name = _this$props.name;

      var isActive = _this.context.isModalActive(name);

      _this.setState({
        isActive: isActive
      });

      if (isActive) didOpen();
      if (!isActive) willClose();
    };

    _this.getStyles = function (name) {
      var _this$props2 = _this.props,
          center = _this$props2.center,
          maxWidth = _this$props2.maxWidth,
          zIndex = _this$props2.zIndex,
          overlayColor = _this$props2.overlayColor;

      switch (name) {
        case 'wrapper':
          {
            var style = _extends({}, _defaultStyles2.default.wrapper, {
              zIndex: zIndex
            });
            if (center) {
              style = _extends({}, style, _defaultStyles2.default.center);
            }
            return style;
          }
        case 'overlay':
          {
            return _extends({}, _defaultStyles2.default.overlay, { background: overlayColor });
          }
        case 'bodyWrapper':
          {
            return _extends({}, _defaultStyles2.default.bodyWrapper);
          }
        case 'body':
          {
            if (maxWidth) {
              return _extends({}, _defaultStyles2.default.body, { width: '100%', maxWidth: maxWidth });
            }
            return _extends({}, _defaultStyles2.default.body);
          }
        case 'title':
          {
            return _extends({}, _defaultStyles2.default.title);
          }
        case 'content':
          {
            return _extends({}, _defaultStyles2.default.content);
          }
        case 'buttonArrow':
          {
            return _extends({}, _defaultStyles2.default.buttonArrow);
          }
        case 'arrowLeft':
          {
            return _extends({}, _defaultStyles2.default.arrow, { transform: 'rotate(45deg)' });
          }
        case 'arrowRight':
          {
            return _extends({}, _defaultStyles2.default.arrow, { transform: 'rotate(-45deg)' });
          }
      }
    };

    _this.onCloseModal = function () {
      _this.context.closeModal(_this.props.name);
    };

    _this.handleClickCloseOverlay = function () {
      var closeOverlayDisabled = _this.props.closeOverlayDisabled;

      if (closeOverlayDisabled) return false;
      _this.onCloseModal();
    };

    _this.renderCustomUI = function () {
      var _this$props3 = _this.props,
          title = _this$props3.title,
          children = _this$props3.children;

      return _this.context.customUI(title, children, _this.onCloseModal);
    };

    _this.state = {
      isActive: false
    };

    if ((0, _helper.canUseDOM)()) {
      _this.modal = document.createElement('div');
      _this.modal.id = props.name;
    }
    return _this;
  }

  _createClass(Modal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({
        isActive: this.context.isModalActive(this.props.name)
      });
      this.unsubscribe = this.context.subscriber(this.subscriber);

      if ((0, _helper.canUseDOM)()) {
        var id = 'body-modal-es';
        this.container = document.getElementById(id);

        if (!this.container) {
          this.container = document.createElement('div');
          this.container.id = id;
          this.container.style.cssText = '\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          z-index: 99;\n        ';
          document.body.appendChild(this.container);
        }

        this.container.appendChild(this.modal);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.willUnmount();
      this.container.removeChild(this.modal);
      this.unsubscribe();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var isActive = this.state.isActive;
      var _props = this.props,
          title = _props.title,
          children = _props.children,
          className = _props.className;


      var element = _react2.default.createElement(
        _Animation2.default,
        { show: isActive },
        function (_ref) {
          var opacity = _ref.opacity,
              opacityModal = _ref.opacityModal,
              y = _ref.y;
          return _react2.default.createElement(
            'div',
            { role: 'wrapper', style: _this2.getStyles('wrapper') },
            _react2.default.createElement('div', {
              role: 'overlay',
              style: _extends({}, _this2.getStyles('overlay'), {
                opacity: opacity
              }),
              onClick: _this2.handleClickCloseOverlay
            }),
            _react2.default.createElement(
              'div',
              {
                role: 'dialog',
                style: _extends({}, _this2.getStyles('bodyWrapper'), {
                  opacity: opacityModal,
                  transform: 'translate3d(0px, ' + y + 'px, 0px)'
                })
              },
              _react2.default.createElement(
                Body,
                null,
                _this2.renderCustomUI(),
                !_this2.renderCustomUI() && _react2.default.createElement(
                  'div',
                  {
                    role: 'dialog-body',
                    className: className,
                    style: _extends({}, _this2.getStyles('body'))
                  },
                  _react2.default.createElement(
                    'div',
                    {
                      role: 'content',
                      style: _this2.getStyles('buttonArrow'),
                      onClick: _this2.onCloseModal
                    },
                    _react2.default.createElement('div', { style: _this2.getStyles('arrowLeft') }),
                    _react2.default.createElement('div', { style: _this2.getStyles('arrowRight') })
                  ),
                  title !== '' && _react2.default.createElement(
                    'div',
                    { role: 'dialog-title', style: _this2.getStyles('title') },
                    title
                  ),
                  _react2.default.createElement(
                    'div',
                    {
                      role: 'dialog-content',
                      style: _this2.getStyles('content')
                    },
                    children
                  )
                )
              )
            )
          );
        }
      );

      return _reactDom2.default.createPortal(element, this.modal);
    }
  }]);

  return Modal;
}(_react.Component), _class.propTypes = {
  name: _propTypes2.default.string.isRequired,
  title: _propTypes2.default.string,
  center: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  maxWidth: _propTypes2.default.string,
  zIndex: _propTypes2.default.number,
  overlayColor: _propTypes2.default.string,
  closeOverlayDisabled: _propTypes2.default.bool,
  didOpen: _propTypes2.default.func,
  willUnmount: _propTypes2.default.func,
  willClose: _propTypes2.default.func
}, _class.defaultProps = {
  zIndex: 0,
  className: '',
  overlayColor: 'rgba(0, 0, 0, 0.7)',
  closeOverlayDisabled: false,
  didOpen: function didOpen() {
    return false;
  },
  willUnmount: function willUnmount() {
    return false;
  },
  willClose: function willClose() {
    return false;
  }
}, _class.contextTypes = {
  isModalActive: _propTypes2.default.func,
  openModal: _propTypes2.default.func,
  closeModal: _propTypes2.default.func,
  closeAllModal: _propTypes2.default.func,
  customUI: _propTypes2.default.func,
  subscriber: _propTypes2.default.func
}, _temp);


var Body = function Body(_ref2) {
  var children = _ref2.children;
  return _react2.default.createElement(
    'div',
    {
      style: {
        pointerEvents: 'auto'
      }
    },
    children
  );
};

exports.default = Modal;