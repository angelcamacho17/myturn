{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Animation = require('./Animation');\n\nvar _Animation2 = _interopRequireDefault(_Animation);\n\nvar _defaultStyles = require('./defaultStyles');\n\nvar _defaultStyles2 = _interopRequireDefault(_defaultStyles);\n\nvar _helper = require('./helper');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Modal = (_temp = _class = function (_Component) {\n  _inherits(Modal, _Component);\n\n  function Modal(props) {\n    _classCallCheck(this, Modal);\n\n    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\n    _this.isActive = function () {\n      var modalNameActive = _this.state.modalNameActive;\n      var name = _this.props.name;\n      return modalNameActive === name;\n    };\n\n    _this.subscriber = function () {\n      var _this$props = _this.props,\n          didOpen = _this$props.didOpen,\n          willClose = _this$props.willClose,\n          name = _this$props.name;\n\n      var isActive = _this.context.isModalActive(name);\n\n      _this.setState({\n        isActive: isActive\n      });\n\n      if (isActive) didOpen();\n      if (!isActive) willClose();\n    };\n\n    _this.getStyles = function (name) {\n      var _this$props2 = _this.props,\n          center = _this$props2.center,\n          maxWidth = _this$props2.maxWidth,\n          zIndex = _this$props2.zIndex,\n          overlayColor = _this$props2.overlayColor;\n\n      switch (name) {\n        case 'wrapper':\n          {\n            var style = _extends({}, _defaultStyles2.default.wrapper, {\n              zIndex: zIndex\n            });\n\n            if (center) {\n              style = _extends({}, style, _defaultStyles2.default.center);\n            }\n\n            return style;\n          }\n\n        case 'overlay':\n          {\n            return _extends({}, _defaultStyles2.default.overlay, {\n              background: overlayColor\n            });\n          }\n\n        case 'bodyWrapper':\n          {\n            return _extends({}, _defaultStyles2.default.bodyWrapper);\n          }\n\n        case 'body':\n          {\n            if (maxWidth) {\n              return _extends({}, _defaultStyles2.default.body, {\n                width: '100%',\n                maxWidth: maxWidth\n              });\n            }\n\n            return _extends({}, _defaultStyles2.default.body);\n          }\n\n        case 'title':\n          {\n            return _extends({}, _defaultStyles2.default.title);\n          }\n\n        case 'content':\n          {\n            return _extends({}, _defaultStyles2.default.content);\n          }\n\n        case 'buttonArrow':\n          {\n            return _extends({}, _defaultStyles2.default.buttonArrow);\n          }\n\n        case 'arrowLeft':\n          {\n            return _extends({}, _defaultStyles2.default.arrow, {\n              transform: 'rotate(45deg)'\n            });\n          }\n\n        case 'arrowRight':\n          {\n            return _extends({}, _defaultStyles2.default.arrow, {\n              transform: 'rotate(-45deg)'\n            });\n          }\n      }\n    };\n\n    _this.onCloseModal = function () {\n      _this.context.closeModal(_this.props.name);\n    };\n\n    _this.handleClickCloseOverlay = function () {\n      var closeOverlayDisabled = _this.props.closeOverlayDisabled;\n      if (closeOverlayDisabled) return false;\n\n      _this.onCloseModal();\n    };\n\n    _this.renderCustomUI = function () {\n      var _this$props3 = _this.props,\n          title = _this$props3.title,\n          children = _this$props3.children;\n      return _this.context.customUI(title, children, _this.onCloseModal);\n    };\n\n    _this.state = {\n      isActive: false\n    };\n\n    if ((0, _helper.canUseDOM)()) {\n      _this.modal = document.createElement('div');\n      _this.modal.id = props.name;\n    }\n\n    return _this;\n  }\n\n  _createClass(Modal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.setState({\n        isActive: this.context.isModalActive(this.props.name)\n      });\n      this.unsubscribe = this.context.subscriber(this.subscriber);\n\n      if ((0, _helper.canUseDOM)()) {\n        var id = 'body-modal-es';\n        this.container = document.getElementById(id);\n\n        if (!this.container) {\n          this.container = document.createElement('div');\n          this.container.id = id;\n          this.container.style.cssText = '\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          right: 0;\\n          z-index: 99;\\n        ';\n          document.body.appendChild(this.container);\n        }\n\n        this.container.appendChild(this.modal);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.props.willUnmount();\n      this.container.removeChild(this.modal);\n      this.unsubscribe();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var isActive = this.state.isActive;\n      var _props = this.props,\n          title = _props.title,\n          children = _props.children,\n          className = _props.className;\n\n      var element = _react2.default.createElement(_Animation2.default, {\n        show: isActive\n      }, function (_ref) {\n        var opacity = _ref.opacity,\n            opacityModal = _ref.opacityModal,\n            y = _ref.y;\n        return _react2.default.createElement('div', {\n          role: 'wrapper',\n          style: _this2.getStyles('wrapper')\n        }, _react2.default.createElement('div', {\n          role: 'overlay',\n          style: _extends({}, _this2.getStyles('overlay'), {\n            opacity: opacity\n          }),\n          onClick: _this2.handleClickCloseOverlay\n        }), _react2.default.createElement('div', {\n          role: 'dialog',\n          style: _extends({}, _this2.getStyles('bodyWrapper'), {\n            opacity: opacityModal,\n            transform: 'translate3d(0px, ' + y + 'px, 0px)'\n          })\n        }, _react2.default.createElement(Body, null, _this2.renderCustomUI(), !_this2.renderCustomUI() && _react2.default.createElement('div', {\n          role: 'dialog-body',\n          className: className,\n          style: _extends({}, _this2.getStyles('body'))\n        }, _react2.default.createElement('div', {\n          role: 'content',\n          style: _this2.getStyles('buttonArrow'),\n          onClick: _this2.onCloseModal\n        }, _react2.default.createElement('div', {\n          style: _this2.getStyles('arrowLeft')\n        }), _react2.default.createElement('div', {\n          style: _this2.getStyles('arrowRight')\n        })), title !== '' && _react2.default.createElement('div', {\n          role: 'dialog-title',\n          style: _this2.getStyles('title')\n        }, title), _react2.default.createElement('div', {\n          role: 'dialog-content',\n          style: _this2.getStyles('content')\n        }, children)))));\n      });\n\n      return _reactDom2.default.createPortal(element, this.modal);\n    }\n  }]);\n\n  return Modal;\n}(_react.Component), _class.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  title: _propTypes2.default.string,\n  center: _propTypes2.default.bool,\n  className: _propTypes2.default.string,\n  maxWidth: _propTypes2.default.string,\n  zIndex: _propTypes2.default.number,\n  overlayColor: _propTypes2.default.string,\n  closeOverlayDisabled: _propTypes2.default.bool,\n  didOpen: _propTypes2.default.func,\n  willUnmount: _propTypes2.default.func,\n  willClose: _propTypes2.default.func\n}, _class.defaultProps = {\n  zIndex: 0,\n  className: '',\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  closeOverlayDisabled: false,\n  didOpen: function didOpen() {\n    return false;\n  },\n  willUnmount: function willUnmount() {\n    return false;\n  },\n  willClose: function willClose() {\n    return false;\n  }\n}, _class.contextTypes = {\n  isModalActive: _propTypes2.default.func,\n  openModal: _propTypes2.default.func,\n  closeModal: _propTypes2.default.func,\n  closeAllModal: _propTypes2.default.func,\n  customUI: _propTypes2.default.func,\n  subscriber: _propTypes2.default.func\n}, _temp);\n\nvar Body = function Body(_ref2) {\n  var children = _ref2.children;\n  return _react2.default.createElement('div', {\n    style: {\n      pointerEvents: 'auto'\n    }\n  }, children);\n};\n\nexports.default = Modal;","map":null,"metadata":{},"sourceType":"script"}